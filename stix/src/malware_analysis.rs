use std::collections::BTreeSet;

use chrono::{DateTime, Utc};
use serde::Deserialize;

use crate::{vocab::MalwareResult, CommonProperties, Id};

#[derive(Deserialize, stix_derive::TypedObject)]
#[typed_object(core)]
pub struct MalwareAnalysis {
    #[serde(flatten)]
    common: CommonProperties,
    pub product: String,
    #[serde(default)]
    pub version: Option<String>,
    #[serde(default)]
    pub host_vm_ref: Option<Id>,
    #[serde(default)]
    pub operating_system_ref: Option<Id>,
    #[serde(default)]
    pub installed_software_refs: BTreeSet<Id>,
    #[serde(default)]
    pub configuration_version: Option<String>,
    #[serde(default)]
    pub modules: Vec<String>,
    #[serde(default)]
    pub analysis_version_engine: Option<String>,
    #[serde(default)]
    pub analysis_definition_version: Option<String>,
    #[serde(default)]
    pub submitted: Option<DateTime<Utc>>,
    #[serde(default)]
    pub analysis_started: Option<DateTime<Utc>>,
    #[serde(default)]
    pub analysis_ended: Option<DateTime<Utc>>,
    #[serde(default)]
    pub result: Option<MalwareResult>,
    #[serde(default)]
    pub analysis_sco_refs: BTreeSet<Id>,
    #[serde(default)]
    pub sample_ref: Option<Id>,
}

impl AsRef<CommonProperties> for MalwareAnalysis {
    fn as_ref(&self) -> &CommonProperties {
        &self.common
    }
}
